name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Lint files
        run: yarn lint

      - name: Typecheck files
        run: yarn typecheck

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Run unit tests
        run: yarn test --maxWorkers=2 --coverage --passWithNoTests

  build-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build package
        run: yarn prepare

  build-android:
    runs-on: ubuntu-latest
    env:
      TURBO_CACHE_DIR: .turbo/android
      GPR_USER: LucraReactNativeCi
      GPR_KEY: ${{ secrets.GPR_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Set up Fastlane
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: example

      - name: Set up Firebase authentication
        run: |
          FIREBASE_SERVICE_CREDENTIALS_FILE="${{ runner.temp }}/firebase-service-account.json"
          echo "FIREBASE_SERVICE_CREDENTIALS_FILE=$FIREBASE_SERVICE_CREDENTIALS_FILE" >> $GITHUB_ENV
          set +x # Disable logging secrets
          cat <<EOF > "$FIREBASE_SERVICE_CREDENTIALS_FILE"
          ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          EOF
          set -x # Re-enable logging

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          # Run the turbo command and save the output to a temporary file
          yarn turbo run release:android --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json > turbo_output.json
          # Parse and extract the cache status
          TURBO_CACHE_STATUS=$(node -p "require('./turbo_output.json').tasks.find(t => t.task === 'release:android').cache.status")
          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Install JDK
        if: env.turbo_cache_hit != 1
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.turbo_cache_hit != 1
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('example/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build example for Android
        env:
          JAVA_OPTS: '-XX:MaxHeapSize=6g'
        run: |
          yarn turbo run release:android --env-mode=loose --cache-dir="${{ env.TURBO_CACHE_DIR }}"

  build-ios:
    runs-on: self-hosted
    env:
      TURBO_CACHE_DIR: .turbo/ios
      APP_STORE_CONNECT_API_KEY_ID: ${{secrets.APP_STORE_CONNECT_API_KEY_ID}}
      APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID}}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{secrets.APP_STORE_CONNECT_API_KEY_CONTENT}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Cache turborepo for iOS
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-ios-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-ios-

      - name: Check turborepo cache for iOS
        run: |
          # Run the turbo command and save the output to a temporary file
          yarn turbo run release:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json > turbo_output.json
          # Parse and extract the cache status
          TURBO_CACHE_STATUS=$(node -p "require('./turbo_output.json').tasks.find(t => t.task === 'release:ios').cache.status")
          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Cache cocoapods
        if: env.turbo_cache_hit != 1
        id: cocoapods-cache
        uses: actions/cache@v4
        with:
          path: |
            **/ios/Pods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: Set up Fastlane
        run: |
          cd example
          gem install bundler:2.4.7
          bundle install

      - name: Validate Podfile.lock consistency
        run: |
          cd example/ios
          if ! cmp -s Podfile.lock Pods/Manifest.lock; then
            echo "Podfile.lock is out of sync, requiring pod install"
            echo "pod_install_required=1" >> $GITHUB_ENV
          fi

      - name: Install cocoapods
        if: env.turbo_cache_hit != 1 && (steps.cocoapods-cache.outputs.cache-hit != 'true' || env.pod_install_required == '1')
        run: |
          cd example/ios
          pod repo update
          pod install
        env:
          NO_FLIPPER: 1

      - name: Build example for iOS
        run: |
          yarn turbo run release:ios --env-mode=loose --cache-dir="${{ env.TURBO_CACHE_DIR }}"
